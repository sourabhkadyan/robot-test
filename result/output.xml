<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.9.7 on linux)" generated="20230227 11:31:04.057" rpa="false" schemaversion="3">
<suite id="s1" name="Source" source="/workspace/source">
<suite id="s1-s1" name="Data Driven" source="/workspace/source/data_driven.robot">
<test id="s1-s1-t1" name="Addition" line="17">
<kw name="Calculate">
<arg>12 + 2 + 2</arg>
<arg>16</arg>
<kw name="Push Buttons" library="CalculatorLibrary">
<arg>C${expression}=</arg>
<doc>Pushes the specified ``buttons``.</doc>
<status status="PASS" starttime="20230227 11:31:04.088" endtime="20230227 11:31:04.089"/>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<arg>${expected}</arg>
<doc>Verifies that the current result is ``expected``.</doc>
<status status="PASS" starttime="20230227 11:31:04.089" endtime="20230227 11:31:04.089"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.088" endtime="20230227 11:31:04.089"/>
</kw>
<kw name="Calculate">
<arg>2 + -3</arg>
<arg>-1</arg>
<kw name="Push Buttons" library="CalculatorLibrary">
<arg>C${expression}=</arg>
<doc>Pushes the specified ``buttons``.</doc>
<status status="PASS" starttime="20230227 11:31:04.090" endtime="20230227 11:31:04.090"/>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<arg>${expected}</arg>
<doc>Verifies that the current result is ``expected``.</doc>
<status status="PASS" starttime="20230227 11:31:04.090" endtime="20230227 11:31:04.090"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.089" endtime="20230227 11:31:04.090"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.087" endtime="20230227 11:31:04.091"/>
</test>
<test id="s1-s1-t2" name="Subtraction" line="20">
<kw name="Calculate">
<arg>12 - 2 - 2</arg>
<arg>8</arg>
<kw name="Push Buttons" library="CalculatorLibrary">
<arg>C${expression}=</arg>
<doc>Pushes the specified ``buttons``.</doc>
<status status="PASS" starttime="20230227 11:31:04.092" endtime="20230227 11:31:04.092"/>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<arg>${expected}</arg>
<doc>Verifies that the current result is ``expected``.</doc>
<status status="PASS" starttime="20230227 11:31:04.092" endtime="20230227 11:31:04.092"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.091" endtime="20230227 11:31:04.092"/>
</kw>
<kw name="Calculate">
<arg>2 - -3</arg>
<arg>5</arg>
<kw name="Push Buttons" library="CalculatorLibrary">
<arg>C${expression}=</arg>
<doc>Pushes the specified ``buttons``.</doc>
<status status="PASS" starttime="20230227 11:31:04.093" endtime="20230227 11:31:04.093"/>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<arg>${expected}</arg>
<doc>Verifies that the current result is ``expected``.</doc>
<status status="PASS" starttime="20230227 11:31:04.093" endtime="20230227 11:31:04.093"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.092" endtime="20230227 11:31:04.093"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.091" endtime="20230227 11:31:04.093"/>
</test>
<test id="s1-s1-t3" name="Multiplication" line="23">
<kw name="Calculate">
<arg>12 * 2 * 2</arg>
<arg>48</arg>
<kw name="Push Buttons" library="CalculatorLibrary">
<arg>C${expression}=</arg>
<doc>Pushes the specified ``buttons``.</doc>
<status status="PASS" starttime="20230227 11:31:04.094" endtime="20230227 11:31:04.095"/>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<arg>${expected}</arg>
<doc>Verifies that the current result is ``expected``.</doc>
<status status="PASS" starttime="20230227 11:31:04.095" endtime="20230227 11:31:04.095"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.094" endtime="20230227 11:31:04.095"/>
</kw>
<kw name="Calculate">
<arg>2 * -3</arg>
<arg>-6</arg>
<kw name="Push Buttons" library="CalculatorLibrary">
<arg>C${expression}=</arg>
<doc>Pushes the specified ``buttons``.</doc>
<status status="PASS" starttime="20230227 11:31:04.095" endtime="20230227 11:31:04.096"/>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<arg>${expected}</arg>
<doc>Verifies that the current result is ``expected``.</doc>
<status status="PASS" starttime="20230227 11:31:04.096" endtime="20230227 11:31:04.096"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.095" endtime="20230227 11:31:04.096"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.094" endtime="20230227 11:31:04.096"/>
</test>
<test id="s1-s1-t4" name="Division" line="26">
<kw name="Calculate">
<arg>12 / 2 / 2</arg>
<arg>3</arg>
<kw name="Push Buttons" library="CalculatorLibrary">
<arg>C${expression}=</arg>
<doc>Pushes the specified ``buttons``.</doc>
<status status="PASS" starttime="20230227 11:31:04.097" endtime="20230227 11:31:04.097"/>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<arg>${expected}</arg>
<doc>Verifies that the current result is ``expected``.</doc>
<status status="PASS" starttime="20230227 11:31:04.097" endtime="20230227 11:31:04.097"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.097" endtime="20230227 11:31:04.098"/>
</kw>
<kw name="Calculate">
<arg>2 / -3</arg>
<arg>-1</arg>
<kw name="Push Buttons" library="CalculatorLibrary">
<arg>C${expression}=</arg>
<doc>Pushes the specified ``buttons``.</doc>
<status status="PASS" starttime="20230227 11:31:04.098" endtime="20230227 11:31:04.098"/>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<arg>${expected}</arg>
<doc>Verifies that the current result is ``expected``.</doc>
<status status="PASS" starttime="20230227 11:31:04.098" endtime="20230227 11:31:04.099"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.098" endtime="20230227 11:31:04.099"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.096" endtime="20230227 11:31:04.099"/>
</test>
<test id="s1-s1-t5" name="Failing" line="29">
<kw name="Calculate">
<arg>2 + 1</arg>
<arg>3</arg>
<kw name="Push Buttons" library="CalculatorLibrary">
<arg>C${expression}=</arg>
<doc>Pushes the specified ``buttons``.</doc>
<status status="PASS" starttime="20230227 11:31:04.100" endtime="20230227 11:31:04.100"/>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<arg>${expected}</arg>
<doc>Verifies that the current result is ``expected``.</doc>
<status status="PASS" starttime="20230227 11:31:04.100" endtime="20230227 11:31:04.100"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.099" endtime="20230227 11:31:04.100"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.099" endtime="20230227 11:31:04.100"/>
</test>
<test id="s1-s1-t6" name="Calculation error" line="31">
<kw name="Calculation should fail">
<arg>kekkonen</arg>
<arg>Invalid button 'k'.</arg>
<kw name="Should Cause Error" library="CalculatorLibrary">
<var>${error}</var>
<arg>C${expression}=</arg>
<doc>Verifies that calculating the given ``expression`` causes an error.</doc>
<msg timestamp="20230227 11:31:04.102" level="INFO">${error} = Invalid button 'k'.</msg>
<status status="PASS" starttime="20230227 11:31:04.101" endtime="20230227 11:31:04.102"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${expected}</arg>
<arg>${error}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20230227 11:31:04.102" endtime="20230227 11:31:04.102"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.101" endtime="20230227 11:31:04.102"/>
</kw>
<kw name="Calculation should fail">
<arg>${EMPTY}</arg>
<arg>Invalid expression.</arg>
<kw name="Should Cause Error" library="CalculatorLibrary">
<var>${error}</var>
<arg>C${expression}=</arg>
<doc>Verifies that calculating the given ``expression`` causes an error.</doc>
<msg timestamp="20230227 11:31:04.103" level="INFO">${error} = Invalid expression.</msg>
<status status="PASS" starttime="20230227 11:31:04.103" endtime="20230227 11:31:04.103"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${expected}</arg>
<arg>${error}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20230227 11:31:04.103" endtime="20230227 11:31:04.104"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.102" endtime="20230227 11:31:04.104"/>
</kw>
<kw name="Calculation should fail">
<arg>1 / 0</arg>
<arg>Division by zero.</arg>
<kw name="Should Cause Error" library="CalculatorLibrary">
<var>${error}</var>
<arg>C${expression}=</arg>
<doc>Verifies that calculating the given ``expression`` causes an error.</doc>
<msg timestamp="20230227 11:31:04.105" level="INFO">${error} = Division by zero.</msg>
<status status="PASS" starttime="20230227 11:31:04.104" endtime="20230227 11:31:04.105"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${expected}</arg>
<arg>${error}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20230227 11:31:04.105" endtime="20230227 11:31:04.105"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.104" endtime="20230227 11:31:04.105"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.101" endtime="20230227 11:31:04.105"/>
</test>
<doc>Example test cases using the data-driven testing approach.

The _data-driven_ style works well when you need to repeat
the same workflow multiple times.

Tests use ``Calculate`` keyword created in this file, that in
turn uses keywords in ``CalculatorLibrary.py``. An exception
is the last test that has a custom _template keyword_.

Notice that one of these tests fails on purpose to show how
failures look like.</doc>
<status status="PASS" starttime="20230227 11:31:04.082" endtime="20230227 11:31:04.106"/>
</suite>
<suite id="s1-s2" name="Gherkin" source="/workspace/source/gherkin.robot">
<test id="s1-s2-t1" name="Addition" line="16">
<kw name="Given calculator has been cleared">
<kw name="Push Button" library="CalculatorLibrary">
<arg>C</arg>
<doc>Pushes the specified ``button``.</doc>
<status status="PASS" starttime="20230227 11:31:04.110" endtime="20230227 11:31:04.110"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.110" endtime="20230227 11:31:04.110"/>
</kw>
<kw name="When user types &quot;1 + 1&quot;" sourcename="User types &quot;${expression}&quot;">
<kw name="Push Buttons" library="CalculatorLibrary">
<arg>${expression}</arg>
<doc>Pushes the specified ``buttons``.</doc>
<status status="PASS" starttime="20230227 11:31:04.111" endtime="20230227 11:31:04.111"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.110" endtime="20230227 11:31:04.111"/>
</kw>
<kw name="and user pushes equals">
<kw name="Push Button" library="CalculatorLibrary">
<arg>=</arg>
<doc>Pushes the specified ``button``.</doc>
<status status="PASS" starttime="20230227 11:31:04.111" endtime="20230227 11:31:04.111"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.111" endtime="20230227 11:31:04.112"/>
</kw>
<kw name="Then result is &quot;2&quot;" sourcename="Result is &quot;${result}&quot;">
<kw name="Result Should Be" library="CalculatorLibrary">
<arg>${result}</arg>
<doc>Verifies that the current result is ``expected``.</doc>
<status status="PASS" starttime="20230227 11:31:04.112" endtime="20230227 11:31:04.112"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.112" endtime="20230227 11:31:04.112"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.109" endtime="20230227 11:31:04.112"/>
</test>
<doc>Example test case using the gherkin syntax.

This test has a workflow similar to the keyword-driven
examples. The difference is that the keywords use higher
abstraction level and their arguments are embedded into
the keyword names.

This kind of _gherkin_ syntax has been made popular by
[http://cukes.info|Cucumber]. It works well especially when
tests act as examples that need to be easily understood also
by the business people.</doc>
<status status="PASS" starttime="20230227 11:31:04.107" endtime="20230227 11:31:04.113"/>
</suite>
<suite id="s1-s3" name="Keyword Driven" source="/workspace/source/keyword_driven.robot">
<test id="s1-s3-t1" name="Push button" line="16">
<kw name="Push Button" library="CalculatorLibrary">
<arg>1</arg>
<doc>Pushes the specified ``button``.</doc>
<status status="PASS" starttime="20230227 11:31:04.116" endtime="20230227 11:31:04.116"/>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<arg>1</arg>
<doc>Verifies that the current result is ``expected``.</doc>
<status status="PASS" starttime="20230227 11:31:04.116" endtime="20230227 11:31:04.116"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.116" endtime="20230227 11:31:04.117"/>
</test>
<test id="s1-s3-t2" name="Push multiple buttons" line="20">
<kw name="Push Button" library="CalculatorLibrary">
<arg>1</arg>
<doc>Pushes the specified ``button``.</doc>
<status status="PASS" starttime="20230227 11:31:04.117" endtime="20230227 11:31:04.118"/>
</kw>
<kw name="Push Button" library="CalculatorLibrary">
<arg>2</arg>
<doc>Pushes the specified ``button``.</doc>
<status status="PASS" starttime="20230227 11:31:04.118" endtime="20230227 11:31:04.118"/>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<arg>12</arg>
<doc>Verifies that the current result is ``expected``.</doc>
<status status="PASS" starttime="20230227 11:31:04.119" endtime="20230227 11:31:04.119"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.117" endtime="20230227 11:31:04.119"/>
</test>
<test id="s1-s3-t3" name="Simple calculation" line="25">
<kw name="Push Button" library="CalculatorLibrary">
<arg>1</arg>
<doc>Pushes the specified ``button``.</doc>
<status status="PASS" starttime="20230227 11:31:04.120" endtime="20230227 11:31:04.120"/>
</kw>
<kw name="Push Button" library="CalculatorLibrary">
<arg>+</arg>
<doc>Pushes the specified ``button``.</doc>
<status status="PASS" starttime="20230227 11:31:04.120" endtime="20230227 11:31:04.121"/>
</kw>
<kw name="Push Button" library="CalculatorLibrary">
<arg>2</arg>
<doc>Pushes the specified ``button``.</doc>
<status status="PASS" starttime="20230227 11:31:04.121" endtime="20230227 11:31:04.121"/>
</kw>
<kw name="Push Button" library="CalculatorLibrary">
<arg>=</arg>
<doc>Pushes the specified ``button``.</doc>
<status status="PASS" starttime="20230227 11:31:04.121" endtime="20230227 11:31:04.121"/>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<arg>3</arg>
<doc>Verifies that the current result is ``expected``.</doc>
<status status="PASS" starttime="20230227 11:31:04.121" endtime="20230227 11:31:04.122"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.119" endtime="20230227 11:31:04.122"/>
</test>
<test id="s1-s3-t4" name="Longer calculation" line="32">
<kw name="Push Buttons" library="CalculatorLibrary">
<arg>5 + 4 - 3 * 2 / 1 =</arg>
<doc>Pushes the specified ``buttons``.</doc>
<status status="PASS" starttime="20230227 11:31:04.123" endtime="20230227 11:31:04.123"/>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<arg>3</arg>
<doc>Verifies that the current result is ``expected``.</doc>
<status status="PASS" starttime="20230227 11:31:04.123" endtime="20230227 11:31:04.123"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.122" endtime="20230227 11:31:04.123"/>
</test>
<test id="s1-s3-t5" name="Clear" line="36">
<kw name="Push Button" library="CalculatorLibrary">
<arg>1</arg>
<doc>Pushes the specified ``button``.</doc>
<status status="PASS" starttime="20230227 11:31:04.124" endtime="20230227 11:31:04.125"/>
</kw>
<kw name="Push Button" library="CalculatorLibrary">
<arg>C</arg>
<doc>Pushes the specified ``button``.</doc>
<status status="PASS" starttime="20230227 11:31:04.125" endtime="20230227 11:31:04.125"/>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<arg>${EMPTY}</arg>
<doc>Verifies that the current result is ``expected``.</doc>
<status status="PASS" starttime="20230227 11:31:04.125" endtime="20230227 11:31:04.126"/>
</kw>
<status status="PASS" starttime="20230227 11:31:04.124" endtime="20230227 11:31:04.126"/>
</test>
<doc>Example test cases using the keyword-driven testing approach.

All tests contain a workflow constructed from keywords in
``CalculatorLibrary.py``. Creating new tests or editing
existing is easy even for people without programming skills.

The _keyword-driven_ appoach works well for normal test
automation, but the _gherkin_ style might be even better
if also business people need to understand tests. If the
same workflow needs to repeated multiple times, it is best
to use to the _data-driven_ approach.</doc>
<status status="PASS" starttime="20230227 11:31:04.113" endtime="20230227 11:31:04.126"/>
</suite>
<status status="PASS" starttime="20230227 11:31:04.058" endtime="20230227 11:31:04.128"/>
</suite>
<statistics>
<total>
<stat pass="12" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="12" fail="0" skip="0" id="s1" name="Source">Source</stat>
<stat pass="6" fail="0" skip="0" id="s1-s1" name="Data Driven">Source.Data Driven</stat>
<stat pass="1" fail="0" skip="0" id="s1-s2" name="Gherkin">Source.Gherkin</stat>
<stat pass="5" fail="0" skip="0" id="s1-s3" name="Keyword Driven">Source.Keyword Driven</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
